import{_ as c,r as t,o as i,c as a,a as e,b as n,d as o,w as h,e as s}from"./app.7cabacd3.js";const d="/images/reference/kubernetes/kubernetes-high-level-component-archtecture.jpeg",u={},_=e("h1",{id:"概览",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#概览","aria-hidden":"true"},"#"),n(" 概览")],-1),p=e("h2",{id:"简介",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),n(" 简介")],-1),b={href:"https://kubernetes.io/zh-cn/docs/home/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://research.google/pubs/pub43438/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.cncf.io/",target:"_blank",rel:"noopener noreferrer"},g=e("li",null,"目前使用最广泛的容器编排方案，在容器编排、服务治理、DevOps等诸多领域有着深远影响。",-1),m=s('<p>Kubernetes作为容器编排引擎，简单来说就是负责容器的网络、存储、资源、权限、调度等全生命周期管理。 其本质上是一些以容器形式存在的微服务组件，主要分为负责存储、调度、API等功能的管理面组件和用于网络处理、任务执行的客户端组件。</p><p>Kubernetes往往由多台节点组成集群，这些节点主要分为两类：</p><ul><li>Master节点（常简称为<code>Master</code>）：主要用于部署Kubernetes管理面组件；</li><li>Worker节点(常简称为<code>Node</code>)：主要用于部署工作负载(需要运行的业务应用)。</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><ul><li>Kubernetes的管理面组件只运行在Master节点上；</li><li>Kubernetes的客户端组件在每个节点上都会有一个实例；</li><li>工作负载可以运行在所有节点上，也可以通过配置使工作负载只运行在Worker节点上。</li></ul></div>',4),v={href:"https://kind.sigs.k8s.io/",target:"_blank",rel:"noopener noreferrer"},x=s('<h2 id="架构概览" tabindex="-1"><a class="header-anchor" href="#架构概览" aria-hidden="true">#</a> 架构概览</h2><p><img src="'+d+'" alt="Kubernetes高可用集群整体架构"></p><h2 id="核心组件" tabindex="-1"><a class="header-anchor" href="#核心组件" aria-hidden="true">#</a> 核心组件</h2>',3),C={href:"https://kubernetes.io/zh-cn/docs/concepts/overview/components/#etcd",target:"_blank",rel:"noopener noreferrer"},w={href:"https://kubernetes.io/zh-cn/docs/concepts/overview/components/#kube-apiserver",target:"_blank",rel:"noopener noreferrer"},N={href:"https://kubernetes.io/zh-cn/docs/concepts/overview/components/#kube-controller-manager",target:"_blank",rel:"noopener noreferrer"},z={href:"https://kubernetes.io/zh-cn/docs/concepts/overview/components/#kube-scheduler",target:"_blank",rel:"noopener noreferrer"},K={href:"https://kubernetes.io/zh-cn/docs/concepts/overview/components/#kubelet",target:"_blank",rel:"noopener noreferrer"},I={href:"https://kubernetes.io/zh-cn/docs/concepts/overview/components/#kube-proxy",target:"_blank",rel:"noopener noreferrer"},P={href:"https://kubernetes.io/zh-cn/docs/concepts/overview/components/#dns",target:"_blank",rel:"noopener noreferrer"},S=e("h2",{id:"常用插件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#常用插件","aria-hidden":"true"},"#"),n(" 常用插件")],-1),B={href:"https://kubernetes.io/zh-cn/docs/concepts/architecture/cri/",target:"_blank",rel:"noopener noreferrer"},E=e("code",null,"Docker",-1),F=e("code",null,"Podman",-1),L={href:"https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/networking/",target:"_blank",rel:"noopener noreferrer"},M=e("code",null,"Flannel",-1),V=e("code",null,"Calico",-1),D=e("code",null,"Cilium/EBPF",-1),A={href:"https://kubernetes-csi.github.io/docs/",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,"LocalPath",-1),y=e("code",null,"NFS",-1),W=e("code",null,"Ceph",-1),j={href:"https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress-controllers/",target:"_blank",rel:"noopener noreferrer"},G=e("code",null,"Nginx",-1);function O(T,q){const r=t("ExternalLinkIcon"),l=t("RouterLink");return i(),a("div",null,[_,p,e("p",null,[e("a",b,[n("Kubernetes"),o(r)]),n("是:")]),e("ul",null,[e("li",null,[n("Google基于"),e("a",k,[n("Borg"),o(r)]),n(" 开源的容器编排引擎，提供了面向应用的容器部署和管理系统。")]),e("li",null,[e("a",f,[n("CNCF(Cloud Native Computing Foundation)"),o(r)]),n("的核心组件，被誉为云时代的操作系统。")]),g]),m,e("p",null,[n("Kubernetes也可以部署在单台节点上("),o(l,{to:"/zh/reference/kubernetes/installer/minikube.html"},{default:h(()=>[n("Minikube")]),_:1}),n(")，或者部署在单个容器里("),e("a",v,[n("Kind"),o(r)]),n(")。")]),x,e("ul",null,[e("li",null,[e("a",C,[n("Etcd"),o(r)]),n(": 集群数据的后台数据库，保存了整个集群的状态；")]),e("li",null,[e("a",w,[n("ApiServer"),o(r)]),n(": 提供了资源操作的唯一入口，并提供认证、授权、访问控制、API 注册和发现等机制；")]),e("li",null,[e("a",N,[n("Controller Manager"),o(r)]),n(": 负责维护集群的资源和状态，比如资源管理、故障检测等；")]),e("li",null,[e("a",z,[n("Scheduler"),o(r)]),n(": 负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；")]),e("li",null,[e("a",K,[n("Kubelet"),o(r)]),n(": 负责维护容器的生命周期，同时也负责Volume(CSI)和网络(CNI)的管理；")]),e("li",null,[e("a",I,[n("KubeProxy"),o(r)]),n(": 负责提供集群内部的服务发现和负载均衡，使用EBPF网络时可以没有此组件；")]),e("li",null,[e("a",P,[n("CoreDNS"),o(r)]),n(": 负责为整个集群提供DNS服务；")])]),S,e("ul",null,[e("li",null,[e("a",B,[n("CRI"),o(r)]),n(": 容器运行时接口，负责容器的真正运行，常用"),E,n("或"),F,n("等；")]),e("li",null,[e("a",L,[n("CNI"),o(r)]),n(":容器网络接口，负责集群网络，默认使用"),M,n("，常用的还有"),V,n("、"),D,n("；")]),e("li",null,[e("a",A,[n("CSI"),o(r)]),n(": 容器存储接口，主要负责文件系统的容器挂载，常用"),R,n("、"),y,n("、"),W,n("等；")]),e("li",null,[e("a",j,[n("Ingress Controller"),o(r)]),n(": 为服务提供内部自定义域名和外网入口，常用"),G,n("等。")])])])}const J=c(u,[["render",O],["__file","index.html.vue"]]);export{J as default};
