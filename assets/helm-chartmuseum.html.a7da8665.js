import{_ as c,r as t,o as i,c as h,a as e,b as a,d as n,w as l,e as r}from"./app.7cabacd3.js";const d={},o=r('<h1 id="chart仓库" tabindex="-1"><a class="header-anchor" href="#chart仓库" aria-hidden="true">#</a> Chart仓库</h1><p>Chart仓库是用来存放Chart包的平台。</p><p><code>Chartmuseum</code>是常用来作为Chart仓库的工具，本文使用容器的方式来进行本地搭建。</p><h2 id="安装chart仓库" tabindex="-1"><a class="header-anchor" href="#安装chart仓库" aria-hidden="true">#</a> 安装Chart仓库</h2><h3 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备" aria-hidden="true">#</a> 环境准备</h3>',5),p=e("li",null,"安装机器：Linux系统服务器",-1),u=r(`<h3 id="本地持久化路径" tabindex="-1"><a class="header-anchor" href="#本地持久化路径" aria-hidden="true">#</a> 本地持久化路径</h3><p>准备用于Chart仓库的数据持久化的本地路径<code>$chartLocalPath</code>，并给予读写权限：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">chmod -R 777 </span><span style="color:#9CDCFE;">$chartLocalPath</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="容器启动chartmuseum" tabindex="-1"><a class="header-anchor" href="#容器启动chartmuseum" aria-hidden="true">#</a> 容器启动Chartmuseum</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># $chartLocalPath: 用于Chart仓库的数据持久化的本地路径</span></span>
<span class="line"><span style="color:#D4D4D4;">docker run </span></span>
<span class="line"><span style="color:#D4D4D4;">  --name=chartmuseum \\</span></span>
<span class="line"><span style="color:#D4D4D4;">  --restart=always -it -d \\</span></span>
<span class="line"><span style="color:#D4D4D4;">  -p 8090:8080 \\</span></span>
<span class="line"><span style="color:#D4D4D4;">  -e DEBUG=1 \\</span></span>
<span class="line"><span style="color:#D4D4D4;">  -v </span><span style="color:#9CDCFE;">$chartLocalPath</span><span style="color:#D4D4D4;">:/charts \\</span></span>
<span class="line"><span style="color:#D4D4D4;">  -e STORAGE=local \\</span></span>
<span class="line"><span style="color:#D4D4D4;">  -e STORAGE_LOCAL_ROOTDIR=/charts \\</span></span>
<span class="line"><span style="color:#D4D4D4;">  ghcr.io/helm/chartmuseum:v0.13.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: 参数说明</p><ul><li>端口映射：本地<code>8090</code>端口映射到容器<code>8080</code>端口，可使用本地<code>8090</code>端口访问Chart仓库；</li><li>Chartmuseum版本：此处使用<code>Chartmuseum</code>版本号为<code>v0.13.0</code>； :::</li></ul><h2 id="使用chart仓库" tabindex="-1"><a class="header-anchor" href="#使用chart仓库" aria-hidden="true">#</a> 使用Chart仓库</h2><h3 id="添加chart仓库" tabindex="-1"><a class="header-anchor" href="#添加chart仓库" aria-hidden="true">#</a> 添加Chart仓库</h3><p>将容器启动的<code>Chartmuseum</code>作为Chart仓库添加到本地<code>Helm</code>中：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># $ip: 本机ip</span></span>
<span class="line"><span style="color:#D4D4D4;">helm repo add chartmuseum  http://</span><span style="color:#9CDCFE;">$ip</span><span style="color:#D4D4D4;">:8090</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="上传chart包至chart仓库" tabindex="-1"><a class="header-anchor" href="#上传chart包至chart仓库" aria-hidden="true">#</a> 上传Chart包至Chart仓库</h3>`,12),m=r(`<h3 id="清理chart仓库中的chart包" tabindex="-1"><a class="header-anchor" href="#清理chart仓库中的chart包" aria-hidden="true">#</a> 清理Chart仓库中的Chart包</h3><p>如果需要清理Helmc仓库中的多余chart包，可按照以下步骤完成：</p><ul><li><p><strong>步骤一</strong> 进入仓库的chart包的持久化存储路径，删除该路径下需要清理的chart包；</p></li><li><p><strong>步骤二</strong> 在仓库的chart包的持久化存储路径中，删除名为”index-cache.yaml”的文件；</p></li><li><p><strong>步骤三</strong> 重启Helm仓库服务，如果是在容器中运行，使用如下指令重启该容器即可:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># $containerID: 容器ID</span></span>
<span class="line"><span style="color:#D4D4D4;">docker restart </span><span style="color:#9CDCFE;">$containerID</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,3);function v(D,b){const s=t("RouterLink");return i(),h("div",null,[o,e("ul",null,[p,e("li",null,[a("Helm工具：参考"),n(s,{to:"/zh/reference/tools/helm.html#%E5%AE%89%E8%A3%85helm%E5%B7%A5%E5%85%B7"},{default:l(()=>[a("安装Helm工具")]),_:1})]),e("li",null,[a("Helm Push插件：参考"),n(s,{to:"/zh/reference/tools/helm-push.html#%E5%AE%89%E8%A3%85helm-push%E6%8F%92%E4%BB%B6"},{default:l(()=>[a("安装Helm Push插件")]),_:1})])]),u,e("p",null,[a("参考"),n(s,{to:"/zh/reference/tools/helm-push.html#%E4%BD%BF%E7%94%A8helm-push%E6%8F%92%E4%BB%B6%E4%B8%8A%E4%BC%A0chart%E5%8C%85"},{default:l(()=>[a("使用Helm Push插件上传Chart包")]),_:1})]),m])}const C=c(d,[["render",v],["__file","helm-chartmuseum.html.vue"]]);export{C as default};
